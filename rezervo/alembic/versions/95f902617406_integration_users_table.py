"""integration users table

Revision ID: 95f902617406
Revises: f30ee2562e70
Create Date: 2023-08-27 17:21:01.723560

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "95f902617406"
down_revision = "f30ee2562e70"
branch_labels = None
depends_on = None


def create_integration_users_table() -> None:
    op.create_table(
        "integration_users",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "integration", sa.Enum("SIT", "FSC", name="integration"), nullable=False
        ),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("classes", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("user_id", "integration"),
    )


def copy_admin_config_to_users_table() -> None:
    op.add_column(
        "users",
        sa.Column(
            "admin_config", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
    )
    users_table = sa.Table("users", sa.MetaData(), autoload_with=op.get_bind())
    # Fill admin config with empty JSONB object
    op.execute(users_table.update().values(admin_config=sa.cast({}, postgresql.JSONB)))
    # Copy non-integration config from configs to users as preferences
    configs_table = sa.Table("configs", sa.MetaData(), autoload_with=op.get_bind())
    op.execute(
        users_table.update()
        .values(
            admin_config=sa.func.jsonb_set(
                users_table.c.admin_config,
                "{notifications}",
                configs_table.c.admin_config["notifications"],
            )
        )
        .where(users_table.c.id == configs_table.c.user_id)
    )


def copy_user_config_to_users_table() -> None:
    op.add_column(
        "users",
        sa.Column(
            "preferences", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
    )
    users_table = sa.Table("users", sa.MetaData(), autoload_with=op.get_bind())
    # Fill preferences with empty JSONB object
    op.execute(users_table.update().values(preferences=sa.cast({}, postgresql.JSONB)))
    # Copy non-integration config from configs to users as preferences
    configs_table = sa.Table("configs", sa.MetaData(), autoload_with=op.get_bind())
    op.execute(
        users_table.update()
        .values(
            preferences=sa.func.jsonb_set(
                users_table.c.preferences,
                "{notifications}",
                configs_table.c.config["notifications"],
            )
        )
        .where(users_table.c.id == configs_table.c.user_id)
    )


def copy_user_booking_config_to_integration_users_table() -> None:
    # For each config in the configs table, define a new row in the integration_users table with the sit integration where active and classes columns are values from the configs table column config
    configs_table = sa.Table("configs", sa.MetaData(), autoload_with=op.get_bind())
    integration_users_table = sa.Table(
        "integration_users", sa.MetaData(), autoload_with=op.get_bind()
    )
    op.execute(
        sa.insert(integration_users_table).from_select(
            [
                "user_id",
                "integration",
                "username",
                "password",
                "active",
                "classes",
            ],
            sa.select(
                configs_table.c.user_id,
                sa.literal("SIT"),
                configs_table.c.admin_config["auth"]["email"].astext,
                configs_table.c.admin_config["auth"]["password"].astext,
                configs_table.c.config["active"].cast(sa.Boolean),
                configs_table.c.config["classes"],
            ),
        )
    )


def drop_configs_table() -> None:
    op.drop_index("ix_configs_id", table_name="configs")
    op.drop_table("configs")


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    create_integration_users_table()
    copy_admin_config_to_users_table()
    copy_user_config_to_users_table()
    copy_user_booking_config_to_integration_users_table()
    drop_configs_table()
    # ### end Alembic commands ###


def create_configs_table() -> None:
    op.create_table(
        "configs",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "config",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "admin_config",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="configs_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="configs_pkey"),
        sa.UniqueConstraint("user_id", name="configs_user_id_key"),
    )
    op.create_index("ix_configs_id", "configs", ["id"], unique=False)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "preferences")
    op.drop_column("users", "admin_config")
    op.drop_table("integration_users")
    sa.Enum("SIT", "FSC", name="integration").drop(op.get_bind())
    create_configs_table()
    # ### end Alembic commands ###
