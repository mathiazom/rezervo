"""migrate_recurring_bookings_from_chain_user

Revision ID: b4aca3032fdf
Revises: e51656231116
Create Date: 2024-01-02 00:00:17.463042

"""

import uuid
from typing import Any, Optional

import sqlalchemy as sa
from alembic import op
from pydantic.main import BaseModel
from sqlalchemy import (
    Boolean,
    CheckConstraint,
    Column,
    ForeignKey,
    SmallInteger,
    String,
    UniqueConstraint,
)
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import declarative_base

# revision identifiers, used by Alembic.
revision = "b4aca3032fdf"
down_revision = "270c2f0a9a5a"
branch_labels = None
depends_on = None

Base = declarative_base()


class User(Base):
    __tablename__ = "users"

    id = Column(UUID(as_uuid=True), primary_key=True, index=True, default=uuid.uuid4)
    name = Column(String, unique=True, nullable=False)
    jwt_sub = Column(String, nullable=True)
    cal_token = Column(String, nullable=False)
    preferences = Column(JSONB)
    admin_config = Column(JSONB)


class ChainUser(Base):
    __tablename__ = "chain_users"

    user_id = Column(
        UUID(as_uuid=True), ForeignKey("users.id", ondelete="cascade"), primary_key=True
    )
    chain = Column(String, primary_key=True)
    username = Column(String, nullable=False)
    password = Column(String, nullable=False)
    auth_token = Column(String, nullable=True)
    active = Column(Boolean, nullable=False, default=True)
    classes = Column(JSONB, nullable=False, default=[])


class RecurringBooking(Base):
    __tablename__ = "recurring_bookings"

    id = Column(UUID(as_uuid=True), primary_key=True, index=True, default=uuid.uuid4)
    user_id = Column(
        UUID(as_uuid=True), ForeignKey("users.id", ondelete="cascade"), nullable=False
    )
    chain_id = Column(String, nullable=False)
    location_id = Column(String, nullable=False)
    activity_id = Column(String, nullable=False)
    weekday = Column(
        SmallInteger,
        CheckConstraint("weekday >= 0 AND weekday <= 6", name="check_weekday_range"),
        nullable=False,
    )
    start_time_hour = Column(
        SmallInteger,
        CheckConstraint(
            "start_time_hour >= 0 AND start_time_hour <= 23",
            name="check_start_time_hour_range",
        ),
        nullable=False,
    )
    start_time_minute = Column(
        SmallInteger,
        CheckConstraint(
            "start_time_minute >= 0 AND start_time_minute <= 59",
            name="check_start_time_minute_range",
        ),
        nullable=False,
    )
    display_name = Column(String, nullable=True)

    __table_args__ = (
        UniqueConstraint(
            "user_id",
            "chain_id",
            "location_id",
            "activity_id",
            "weekday",
            "start_time_hour",
            "start_time_minute",
            name="unique_recurring_booking",
        ),
    )


def studio_to_location(chain: str, studio: int) -> Optional[str]:
    match (chain, studio):
        case ("sit", 306):
            return "gloshaugen"
        case ("sit", 307):
            return "dragvoll"
        case ("sit", 540):
            return "moholt"
        case ("sit", 402):
            return "dmmh"
        case ("sit", 308):
            return "portalen"
        case ("fsc", 8):
            return "ski"
        case ("ttt", 1):
            return "rosten"
    return None


def location_to_studio(chain: str, location: str) -> Optional[int]:
    match (chain, location):
        case ("sit", "gloshaugen"):
            return 306
        case ("sit", "dragvoll"):
            return 307
        case ("sit", "moholt"):
            return 540
        case ("sit", "dmmh"):
            return 402
        case ("sit", "portalen"):
            return 308
        case ("fsc", "ski"):
            return 8
        case ("ttt", "rosten"):
            return 1
    return None


class ClassTime(BaseModel):
    hour: int
    minute: int


class Class(BaseModel):
    activity: int
    weekday: int
    studio: int
    time: ClassTime
    display_name: Optional[str] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "recurring_bookings",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("chain_id", sa.String(), nullable=False),
        sa.Column("location_id", sa.String(), nullable=False),
        sa.Column("activity_id", sa.String(), nullable=False),
        sa.Column("weekday", sa.SmallInteger(), nullable=False),
        sa.Column("start_time_hour", sa.SmallInteger(), nullable=False),
        sa.Column("start_time_minute", sa.SmallInteger(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id",
            "chain_id",
            "location_id",
            "activity_id",
            "weekday",
            "start_time_hour",
            "start_time_minute",
            name="unique_recurring_booking",
        ),
    )
    op.create_index(
        op.f("ix_recurring_bookings_id"), "recurring_bookings", ["id"], unique=False
    )
    op.create_check_constraint(
        "check_weekday_range", "recurring_bookings", "weekday >= 0 AND weekday <= 6"
    )
    op.create_check_constraint(
        "check_start_time_hour_range",
        "recurring_bookings",
        "start_time_hour >= 0 AND start_time_hour <= 23",
    )
    op.create_check_constraint(
        "check_start_time_minute_range",
        "recurring_bookings",
        "start_time_minute >= 0 AND start_time_minute <= 59",
    )
    session = sa.orm.Session(bind=op.get_bind())
    for chain_user in session.query(ChainUser):
        classes: Any = chain_user.classes
        session.add_all(
            [
                RecurringBooking(
                    user_id=chain_user.user_id,
                    chain_id=chain_user.chain,
                    location_id=location,
                    activity_id=c["activity"],
                    weekday=c["weekday"],
                    start_time_hour=c["time"]["hour"],
                    start_time_minute=c["time"]["minute"],
                    display_name=c["display_name"],
                )
                for c in classes
                if (location := studio_to_location(chain_user.chain, c["studio"]))
                is not None
            ]
        )
    session.commit()
    op.drop_column("chain_users", "classes")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "chain_users",
        sa.Column(
            "classes", JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True
        ),
    )
    session = sa.orm.Session(bind=op.get_bind())
    for chain_user in session.query(ChainUser):
        recurring_bookings = (
            session.query(RecurringBooking)
            .filter(RecurringBooking.user_id == chain_user.user_id)
            .filter(RecurringBooking.chain_id == chain_user.chain)
            .all()
        )
        classes: list[dict] = [
            Class(
                activity=int(recurring_booking.activity_id),
                weekday=int(recurring_booking.weekday),
                studio=studio,
                time=ClassTime(
                    hour=int(recurring_booking.start_time_hour),
                    minute=int(recurring_booking.start_time_minute),
                ),
                display_name=recurring_booking.display_name,
            ).dict()
            for recurring_booking in recurring_bookings
            if (
                studio := location_to_studio(
                    recurring_booking.chain_id, recurring_booking.location_id
                )
            )
            is not None
        ]
        chain_user.classes = classes
    session.commit()
    op.alter_column("chain_users", "classes", nullable=False)
    op.drop_index(op.f("ix_recurring_bookings_id"), table_name="recurring_bookings")
    op.drop_table("recurring_bookings")
    # ### end Alembic commands ###
