"""rezervo_class_model_migration

Revision ID: a95d01b29b2a
Revises: 5e049d589d59
Create Date: 2023-12-27 00:14:30.283157

"""

import datetime
import enum
import uuid
from typing import Any

import sqlalchemy as sa
from alembic import op
from sqlalchemy import Column, Enum, ForeignKey, String
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import declarative_base

# revision identifiers, used by Alembic.
revision = "a95d01b29b2a"
down_revision = "5e049d589d59"
branch_labels = None
depends_on = None

Base = declarative_base()


class User(Base):
    __tablename__ = "users"

    id = Column(UUID(as_uuid=True), primary_key=True, index=True, default=uuid.uuid4)
    name = Column(String, unique=True, nullable=False)
    jwt_sub = Column(String, nullable=True)
    cal_token = Column(String, nullable=False)
    preferences = Column(JSONB)
    admin_config = Column(JSONB)


class SessionState(enum.Enum):
    CONFIRMED = "CONFIRMED"
    BOOKED = "BOOKED"
    WAITLIST = "WAITLIST"
    PLANNED = "PLANNED"
    UNKNOWN = "UNKNOWN"


class Session(Base):
    __tablename__ = "sessions"

    chain = Column(
        String,
        nullable=False,
        primary_key=True,
    )
    class_id = Column(String, primary_key=True)
    user_id = Column(
        UUID(as_uuid=True), ForeignKey("users.id", ondelete="cascade"), primary_key=True
    )
    status = Column(Enum(SessionState))
    class_data = Column(JSONB)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    session = sa.orm.Session(bind=op.get_bind())
    for s in session.query(Session):
        d: Any = s.class_data
        s.class_data = {
            "id": str(d["id"]),
            "start_time": datetime.datetime.fromisoformat(d["from_field"]).isoformat(),
            "end_time": datetime.datetime.fromisoformat(d["to"]).isoformat(),
            "location": {
                "id": d["studio"]["id"],
                "studio": d["studio"]["name"],
                "room": "",
            },
            "activity": {
                "id": str(d["activityId"]),
                "name": d["name"],
                "category": "",
                "description": "",
                "color": "",
                "image": None,
            },
            "instructors": d["instructors"],
        }
    session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    session = sa.orm.Session(bind=op.get_bind())
    for s in session.query(Session):
        d: Any = s.class_data
        s.class_data = {
            "integration": s.chain,
            "id": int(d["id"]),
            "from_field": d["start_time"],
            "to": d["end_time"],
            "studio": {"id": d["location"]["id"], "name": d["location"]["studio"]},
            "bookable": False,
            "activityId": int(d["activity"]["id"]),
            "name": d["activity"]["name"],
            "instructors": d["instructors"],
            "userStatus": None,
            "bookingOpensAt": "",
        }
    session.commit()
    # ### end Alembic commands ###
